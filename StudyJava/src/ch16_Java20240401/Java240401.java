package ch16_Java20240401;

// 엔티티의 특징
// 1. ?
// 2. 중복해서 관계를 나타내지않는다.
// 백엔드 개발의 7할은 서버를 만드는것
// 입력값이 바른지 틀린지 확인하는것 : 벨리데이션?

// 제네릭 Generic
// 클래스를 담으려고 하니까 너무 많은 클래스가 필요함
// → 이걸 해결하기 위해 Object로 정의하고 저장하면 되긴 하지만
// 꺼낼때 Object에서 해당 클래스로 downCasting해야됨(이렇게 하면 문제가 발생할 수 있음)
// 출력시 입력된 객체타입으로 캐스팅 필요 → 잘못된 객체 타입 캐스팅: RuntimeExecption 발생 → 컴파일 오류
// 이러한 것들을 모두 해결해 줄 수 있는 것이 제네릭 타입임
// 각각의 클래스를 생성할 필요 없이 한번의 선언만 해주면 되는 장점이 있음 → 제네릭, Object둘다
// → 클래스를 지정하지 않아도 됨
// → Object타입의 경우 get()메소드로 가져온 후 다운캐스팅을 통해 수행하지만 약한타입체크만이 가능하기에
// 잘못된 캐스팅으로 실행예외가 발생할 수 있지만 제네릭으로 했을 경우 이런 오류가 없음
// 명시성 : 제네릭타입은 클래스 앞에 어떤 데이터 타입을 쓰는지 명시하기때문에 알아보기 쉽다?
// → Java는 엄격한 언어기 때문에
// 타입캐스팅 유무 : Object는 할때마다 타입캐스팅이 이루어지는데 반해(때문에 오류가 일어날 수 있음)
// 제네릭은 그런게 없음
// 성능 : 위의 특징때문에 Object보다 빠른 성능을 보임

public class Java240401 {
}
