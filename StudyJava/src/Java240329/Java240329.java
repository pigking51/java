package Java240329;

// 추상클래스와 인터페이스의 특징

// 예외처리(458p) - 대표적인 클래스(자주 나오는 거) 확인
// try-catch-finally : 실행순서
// finally를 왜 쓰는지 : 예외가 있던없던 무조건 마지막에 실행(중복으로 사용되는거)
// 상속할때 키워드 extends → 일반, 추상클래스 / implement → 인터페이스
// 예외전가 : 어떤 식으로 코드가 진행되는지 일반 예외처리와 비교해서 서술
// 예외처리는 호출되기 전 자신의 메소드에서 예외처리가 진행되는 것에 비해
// 예외전가는 예외처리를 호출하는 메소드가 직접 하게된다.

// Review 클래스
// 하나는 점수를 매기고, 간단한 텍스트를 쓴다
// 유니크한 관리값이 있어야함(reviewId, rating, text 등...)
// 유저 값 하나 넣기(누가 써야되는지 알아야되기 때문에)
// 강의 값 하나 넣기(어떤 강의인지 알아야되기 때문에)


// 1. public class Review{
                //reviewId
                //rating // 1~10점
                //text // 리뷰텍스트
                //loginId // 유저의 아이디
                //lectureId // 강의 아이디
// }

// 2. 메서드 만들기 : 리뷰를 생성하는 메서드
// public boolean createReview(유저아이디, 강의아이디, 점수, 리뷰평)
// 단, 내부 기능이 필요 ** 아래의 에러 경우에는 메서드가 False를 리턴
// 리뷰 객체가 정상적으로 생성되는 경우에만 True 리턴함!!! === > 생성객체는 ArrayList로 관리
// 2-1) 점수는 1~10점 사이, 점수는 필수
// 2-2) 한명의 유저가 하나의 강의에 한번 리뷰를 남길 수 있음
// 2-3) 수강하지 않은 과목에는 리뷰를 남길 수 없음
// → 다른 클래스 호출해서 확인해야됨

//  ex) createReview("Hero11", 1, 10, "좋은 강의였어요") // 객체생성하고 True 리턴
//  ex) createReview("Hero11", 1, 100, "좋은 강의였어요") // 점수에러이므로 False 리턴
//  ex) createReview("tommy", 3, 5, "그저그럼") // 3번 강의를 수강하지 않으므로 False 리턴

public class Java240329 {
}
