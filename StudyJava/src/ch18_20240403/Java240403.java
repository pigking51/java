package ch18_20240403;

// 람다식을 왜 사용하는지 기억할것

// 람다식 = 함수형 프로그래밍(마이너하다고 함) ↔ 객체형 프로그래밍(이쪽이 대세!!!)
// C는 객체형 함수형 둘다있음
// 객체형 : 인지가 쉬워 설계하기 쉬움(실제 작동하는 것은 함수)
// 함수형 인터페이스 = 단 1개의 추상메소드 → 이게 제일 중요한 단어!!
// → 마치 메소드인것처럼 이름을 짓고 객체에 속해있지 않는 독립된 함수로써 이루어짐?

// 람다식 표현 예 : () → System.out.println("함수")
// → 코드가 한줄이면 중괄호 없애도 됨(2줄부터 중괄호 사용)
// → 이렇게 하면 코드의 길이가 많이 줄어들게 됨
// 람다식은 단순히 줄여쓴다는 의미가 아님(줄여쓰는것은 부가적인 특징, 주 목적은 객체의 느낌이 나지 않도록 하기위함임)

// 람다식 4가지 타입
// 1. 입력,리턴 둘다없는경우
// 2. 입력있고, 리턴없는경우
// 3. 입력없고, 리턴있는경우
// 4. 입력,리턴 둘다있는경우


// 금요일 시험범위 16,17,18 개념 중심으로
// 10번문제는 컬렉션에서 나온다고 함


public class Java240403 {


}
